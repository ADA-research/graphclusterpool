import torch
from cluster_pool import calculate_components

def calculate_components2(n_nodes: int, edges: torch.tensor):
        # From https://stackoverflow.com/questions/10301000/python-connected-components
        # Can we do this as tensor operations that yield a cluster index per node?
        def get_all_connected_groups(graph):
            #already_seen = set()
            #already_seen = torch.sparse_coo_tensor(torch.tensor(0), [], (n_nodes,1), dtype=torch.bool)
            #cluster = torch.empty_like(batch, device=torch.device('cpu'))
            cluster = torch.zeros(n_nodes)
            no_cluster = torch.tensor(0)
            def set_connected_group(node, cluster_id):
                nodes = node
                t = nodes.nelement()
                while nodes.nelement() > 0:
                    cluster[nodes] = cluster_id # Add them to the cluster
                    #print(nodes)
                    #print(graph.size(), n_nodes)
                    nodes = graph[nodes].nonzero().T[-1] # Detect new adjacent nodes
                    nodes = nodes[cluster[nodes] == no_cluster] # Only consider those that have no cluster yet
                    t += nodes.nelement()
                #print(f"Created cluster of size: {t}")
            i = 1
            for node in torch.tensor(range(n_nodes)):
                if cluster[node] == no_cluster: # Node does not have a cluster yet
                    set_connected_group(node, i)
                    i += 1
            print((cluster == no_cluster).any())
            return cluster - 1 # Normalize indexing to start at 1
        #adj_m = torch.zeros([n_nodes, n_nodes], dtype=bool).
        edges = torch.cat((edges, edges.flip(dims=(0,))), dim=1) # Make edge_list bi-directional
        adj_m = torch.sparse_coo_tensor(edges, [True for _ in range(edges.size(1))], size=(n_nodes, n_nodes)).to_dense() 

        #adj_list = {torch.tensor(x): set() for x in range(n_nodes)} #Create an empty adjacency list for all nodes

        #for edge in edges.T.tolist(): #Put values into the adjacency list  #30.9% of time
        #    adj_list[edge[0]].add(edge[1])
        #    adj_list[edge[1]].add(edge[0])
        res = get_all_connected_groups(adj_m)
        return res

n_nodes = 10
edge_list = torch.tensor([[1,4,5,8],
                          [2,5,6,9]])

n_nodes = 1152
edge_list = torch.tensor([[123, 431, 435, 433, 435, 195, 195, 200, 200, 203, 203, 204, 204, 203, 204, 207, 207, 208, 210, 441, 442, 213, 215, 215, 445, 221, 220, 221, 223, 458, 458, 230, 230, 230, 235, 260, 266, 267, 284, 287, 288, 289, 290, 291, 46, 284, 285, 288, 288, 288, 292, 293, 291, 293, 294, 291, 292, 294, 292, 293, 295, 301, 303, 58, 297, 298, 302, 58, 296, 298, 302, 302, 300, 301, 303, 299, 302, 303, 304, 57, 295, 299, 303, 300, 295, 299, 300, 301, 298, 300, 302, 309, 59, 308, 309, 306, 309, 312, 313, 313, 315, 67, 310, 311, 313, 311, 315, 69, 311, 315, 318, 311, 313, 314, 70, 317, 318, 71, 316, 318, 314, 316, 317, 73, 74, 320, 74, 75, 76, 319, 82, 83, 322, 325, 321, 324, 325, 85, 86, 324, 326, 84, 321, 322, 324, 324, 327, 330, 330, 90, 327, 328, 330, 328, 328, 332, 328, 330, 331, 335, 93, 331, 334, 335, 94, 333, 335, 336, 96, 97, 334, 337, 97, 98, 336, 339, 102, 103, 340, 341, 98, 100, 100, 106, 343, 345, 106, 342, 345, 112, 106, 342, 343, 106, 107, 108, 347, 108, 109, 346, 348, 109, 110, 344, 347, 112, 113, 351, 114, 115, 351, 352, 113, 114, 349, 350, 115, 116, 350, 116, 117, 359, 119, 355, 356, 119, 354, 356, 360, 358, 359, 361, 357, 360, 361, 362, 117, 353, 357, 361, 118, 356, 357, 358, 359, 118, 356, 358, 360, 126, 120, 364, 366, 367, 120, 128, 129, 128, 368, 369, 371, 129, 130, 369, 371, 372, 376, 131, 372, 375, 376, 132, 374, 376, 377, 135, 136, 375, 378, 136, 137, 138, 377, 145, 380, 382, 383, 379, 382, 383, 149, 383, 146, 383, 149, 383, 152, 153, 153, 385, 386, 388, 155, 393, 386, 388, 389, 393, 156, 389, 392, 393, 157, 391, 393, 394, 159, 160, 160, 161, 166, 402, 404, 405, 401, 404, 405, 408, 169, 401, 402, 405, 172, 405, 172, 405, 176, 176, 179, 179, 180, 182, 414, 415, 419, 413, 415, 419, 419, 417, 418, 420, 416, 419, 420, 421, 180, 412, 416, 420, 412, 416, 417, 418, 415, 417, 419, 188, 189, 423, 427, 186, 187, 422, 426, 183, 425, 426, 183, 184, 424, 426, 191, 430, 192, 430, 431, 432, 191, 192, 427, 430, 192, 193, 428, 432, 435, 428, 430, 431, 194, 195, 434, 435, 195, 433, 435, 431, 433, 198, 199, 200, 437, 199, 200, 436, 207, 208, 439, 208, 438, 442, 212, 209, 210, 440, 442, 209, 439, 441, 212, 213, 440, 214, 215, 216, 446, 217, 447, 448, 449, 216, 217, 444, 447, 217, 445, 446, 218, 445, 449, 452, 218, 445, 448, 219, 451, 452, 220, 221, 450, 218, 219, 448, 450, 221, 222, 223, 454, 223, 224, 453, 230, 231, 232, 456, 229, 230, 455, 459, 224, 225, 226, 458, 227, 227, 228, 456, 458, 461, 463, 464, 233, 460, 463, 237, 238, 466, 467, 233, 460, 461, 464, 235, 236, 464, 466, 236, 237, 462, 465, 240, 241, 242, 469, 470, 240, 243, 243, 246, 473, 474, 478, 246, 472, 474, 478, 478, 476, 477, 479, 475, 478, 479, 480, 244, 471, 475, 479, 471, 475, 476, 477, 474, 476, 478, 172, 195, 199, 203, 199, 204, 200, 203, 207, 208, 216, 220, 224, 223, 224, 235, 230, 243, 116, 117, 118, 129, 130, 137, 263, 138, 264, 284, 162, 163], [121, 193, 193, 194, 194, 196, 197, 199, 201, 201, 202, 202, 203, 204, 205, 205, 206, 206, 209, 209, 209, 214, 214, 216, 217, 220, 222, 222, 224, 225, 226, 229, 231, 232, 234, 258, 264, 264, 285, 285, 285, 286, 286, 286, 287, 287, 287, 287, 289, 290, 291, 291, 292, 292, 292, 293, 293, 293, 294, 294, 294, 295, 295, 296, 296, 296, 296, 297, 297, 297, 297, 298, 299, 299, 299, 300, 300, 300, 300, 301, 301, 301, 301, 302, 303, 303, 303, 303, 304, 304, 304, 306, 307, 307, 307, 308, 308, 310, 310, 311, 311, 312, 312, 312, 312, 313, 313, 314, 314, 314, 314, 315, 315, 315, 316, 316, 316, 317, 317, 317, 318, 318, 318, 319, 319, 319, 320, 320, 320, 320, 321, 321, 321, 321, 322, 322, 322, 323, 323, 323, 323, 325, 325, 325, 325, 326, 326, 327, 328, 329, 329, 329, 329, 330, 331, 331, 332, 332, 332, 332, 333, 333, 333, 333, 334, 334, 334, 334, 336, 336, 336, 336, 337, 337, 337, 337, 338, 338, 338, 338, 339, 340, 341, 342, 342, 342, 343, 343, 343, 344, 345, 345, 345, 346, 346, 346, 346, 347, 347, 347, 347, 348, 348, 348, 348, 349, 349, 349, 350, 350, 350, 350, 351, 351, 351, 351, 352, 352, 352, 353, 353, 353, 354, 354, 354, 355, 355, 355, 355, 357, 357, 357, 358, 358, 358, 358, 359, 359, 359, 359, 360, 360, 361, 361, 361, 362, 362, 362, 362, 363, 365, 365, 365, 365, 366, 368, 369, 370, 370, 370, 370, 371, 372, 373, 373, 373, 373, 374, 374, 374, 374, 375, 375, 375, 375, 377, 377, 377, 377, 378, 378, 378, 378, 379, 379, 379, 379, 380, 380, 380, 381, 381, 382, 382, 384, 384, 385, 385, 387, 387, 387, 387, 389, 389, 390, 390, 390, 390, 391, 391, 391, 391, 392, 392, 392, 392, 394, 394, 395, 395, 396, 401, 401, 401, 402, 402, 402, 403, 404, 404, 404, 404, 406, 406, 407, 407, 408, 410, 411, 412, 412, 413, 413, 413, 413, 414, 414, 414, 415, 416, 416, 416, 417, 417, 417, 417, 418, 418, 418, 418, 420, 420, 420, 420, 421, 421, 421, 422, 422, 422, 422, 423, 423, 423, 423, 424, 424, 424, 425, 425, 425, 425, 427, 427, 428, 428, 428, 428, 429, 429, 429, 429, 430, 431, 431, 431, 431, 432, 432, 432, 433, 433, 433, 433, 434, 434, 434, 435, 435, 436, 436, 436, 436, 437, 437, 437, 438, 438, 438, 439, 439, 439, 440, 441, 441, 441, 441, 442, 442, 442, 443, 443, 443, 444, 444, 444, 444, 445, 445, 445, 445, 446, 446, 446, 446, 447, 447, 447, 448, 448, 448, 448, 449, 449, 449, 450, 450, 450, 451, 451, 451, 452, 452, 452, 452, 453, 453, 453, 453, 454, 454, 454, 455, 455, 455, 455, 456, 456, 456, 456, 457, 457, 457, 457, 458, 459, 459, 459, 459, 460, 460, 460, 461, 461, 461, 462, 462, 462, 462, 463, 463, 463, 463, 465, 465, 465, 465, 466, 466, 466, 466, 467, 468, 468, 468, 468, 469, 470, 471, 472, 472, 472, 472, 473, 473, 473, 473, 474, 475, 475, 475, 476, 476, 476, 476, 477, 477, 477, 477, 479, 479, 479, 479, 480, 480, 480, 168, 196, 197, 199, 203, 203, 204, 204, 205, 206, 214, 216, 222, 227, 228, 231, 232, 239, 246, 249, 249, 258, 258, 261, 261, 262, 262, 280, 282, 282]])

print(calculate_components2(n_nodes, edge_list))

input()

print(len(calculate_components(n_nodes, edge_list)))